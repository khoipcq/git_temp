function deleteUser(url, id){
  var message = I18n.t('confirm_delete_username');
  var confirm = showConfirm(message, "");
  if(confirm){
    $.ajax({
      url: url + "/" + id,
      type: 'DELETE',
      data: {
        id: id,
        authenticity_token: g_token
      }

    }).done(function(){
      //
      window.location = g_usersPath;
    });
  }

}

function showConfirm(message,user_name){
  if(confirm(message + user_name + "?", I18n.t('confirm'))){
    return true;
  }
  return false;
}

function resetPassword(url, email, user_name, token){
  var message = "#{t:(confirm_reset_password)}";
  var confirm = showConfirm(message, $('<div/>').html(user_name).text());
  if(confirm){
    $.ajax({
      url: url,
      type: 'POST',
      data: {
        "user[email]": email,
        authenticity_token: token
      }

    }).done(function(){
      //
      alert("#{t(:reset_password_successful)}");
    });
  }
}
$.validator.addMethod("regex", function(value, element, regexp) {
        return this.optional(element) || regexp.test(value);
    }, "");
$(function(){
  $("#new_user").validate({
    rules:{
      "user[password]": {
        minlength: 6,
        maxlength: 50
      },
      "user[username]":{
      	minlength: 3,
        maxlength: 50,
        regex: /^[A-Za-z0-9\.]+$/,
        required: true
      },
      "user[first_name]": {
        required: true,
        minlength: 2,
        maxlength: 50
      },
      "user[last_name]": {
        required: true,
        minlength: 2,
        maxlength: 50
      },
      "user[password]": {
        required: true,
        minlength: 6,
        maxlength: 32
      },
      "user[email]": {
        required: true,
        email: true
      },
      "user[password_confirmation]": {
        equalTo: "#user_password"
      },
      "recaptcha_response_field": {
        required: true
      }
    },
    messages: {
      "user[first_name]":{
        required: I18n.t('required_msg', {field : I18n.t('firstname')}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('firstname'), length: 50})
      },
      "user[email]":{
        required: I18n.t('required_msg', {field : I18n.t('email')}),
      },
      "user[last_name]":{
        required: I18n.t('required_msg', {field : I18n.t('lastname')}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('lastname'), length: 50})
      },
      "user[username]": {
        required: I18n.t('required_msg', {field : I18n.t('username')}),
        regex: I18n.t('regex_username', {field : I18n.t('username')}),
        minlength: I18n.t('minlength_msg',{field : I18n.t('lastname'), length: 3}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('username'), length: 50})
      },
      "user[password]":{
        required: I18n.t('required_msg', {field : I18n.t('password')}),
        minlength: I18n.t('minlength_msg', {field : I18n.t('password'), length: 6}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('password'), length: 32})
      },
      "user[password_confirmation]": {
        equalTo: I18n.t('password_not_match')
      },
      "recaptcha_response_field": {
        required: I18n.t('required_msg', {field : I18n.t('captcha')}),
      }
    },
    errorPlacement: function(error, element){
      error.appendTo(element.parent());

    }
  });

$("#edit_user").validate({
    rules:{
      "user[password]": {
        minlength: 6,
        maxlength: 50
      },
      "user[first_name]": {
        required: true,
        minlength: 2,
        maxlength: 50
      },
      "user[last_name]": {
        required: true,
        minlength: 2,
        maxlength: 50
      },
      "user[password_confirmation]": {
        equalTo: "#user_password"
      },
      "user[email]": {
        required: true,
        email: true
      },
      "user[username]":{
      	minlength: 3,
      	regex: /^[A-Za-z0-9\.]+$/,
        required: true,
        maxlength: 32
      }
    },
    messages: {
      "user[first_name]":{
        required: I18n.t('required_msg', {field : I18n.t('firstname')}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('firstname'), length: 50})
      },
      "user[email]":{
        required: I18n.t('required_msg', {field : I18n.t('email')}),
      },
      "user[last_name]":{
        required: I18n.t('required_msg', {field : I18n.t('lastname')}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('lastname'), length: 50})
      },
      "user[username]": {
        required: I18n.t('required_msg', {field : I18n.t('username')}),
        regex: I18n.t('regex_username', {field : I18n.t('username')}),
        maxlength: I18n.t('maxlength_msg', {field : I18n.t('username'), length: 50})
      },
      "user[password]":{
        required: I18n.t('required_msg', {field : I18n.t('password')}),
        maxlength: I18n.t('password_length'),
        minlength: I18n.t('password_length')
      },
      "user[password_confirmation]": {
        equalTo: I18n.t('password_not_match')
      }
    },
    errorPlacement: function(error, element){
      error.appendTo(element.parent());
    }
  });
});

  function renderStatus(obj){
    if(obj.aData[3]){
      return "Disabled";
    }
    else {
      return "Enabled";
    }
  }
  function renderAction(obj){
  	if(g_bDeletePermission){
      return '<a onClick="deleteUser(g_usersPath,' + obj.aData[5] +');">Delete</a>';
     }
    else{
      return "";
     }
  }
  function editUser(obj){
  	if(g_bEditPermission){
      return "<a href="+g_editUserPath.replace("%5Bid%5D",obj.aData[5])+">"+obj.aData[1]+"</a>";
   	}
   	else{
   	  return obj.aData[1];
   	}
   }

  //Set style table
  $(document).ready(function(){
    var tb = $("#user_table").dataTable({
      "bJQueryUI":true,
      "bFilter": true,
      "bLengthChange": false,
      "bInfo": false,
      "bProcessing": true,
      "bServerSide": true,
      "sPaginationType": "full_numbers",
      "iDisplayLength": g_displayLength,
      "aaSorting": [[ 1, "asc" ]],
      "aoColumns": [
        { "sTitle": I18n.t('user_management.j_user_no'),
          'bSortable': false,
          "sClass": "center",
          "sWidth": "10%"
        },
        { "sTitle": I18n.t('user_management.j_full_name'),
          "fnRender": editUser,
          "sWidth": "35%"
        },
        { "sTitle": I18n.t('user_management.j_user_name'),
          "sWidth": "35%"
        },
        { "sTitle": I18n.t('user_management.j_status'),
          'bSortable': false,
          "fnRender": renderStatus,
          "sClass": "center",
          "sWidth": "10%"
         },
        { "sTitle": I18n.t('user_management.j_action'),
          'bSortable': false,
          "fnRender": renderAction,
          "sClass": "center",
          "sWidth": "10%"
        },
        {  "bVisible": false }
      ],
      "sAjaxSource": "#{users_path}",
      "fnInitComplete": function () {
        $('div.dataTables_filter input').focus();
      }
    });
  });