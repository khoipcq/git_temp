# This controller is used to manager user
# History: June 06, 2013
# By NamTV
class UsersController < ApplicationController
  before_filter :authenticate_user!
  SORT_MAP = {
    1 => "full_name",
    2 => "username"
  }

  ##
  #Get user list except an user with specify ID
  #Parameters::
  # * (Integer) *iDisplayLength*: number of row per page
  # * (Integer) *iDisplayStart*:  starting number
  # * (Integer) *iSortCol_0*: locate of sort column
  # * (String)  *sSearch*: Search string
  #Return::
  # * (json) Matched user list with paging and number all rows are finded
  #*Author*:: NamTV
  def index

    if request.xhr?
      organization_id = params["organization_id"]
      per_page = params[:iDisplayLength] ||  Settings.per_page
      page = params[:iDisplayStart] ? ((params[:iDisplayStart].to_i/per_page.to_i) + 1) : 1
      params[:iSortCol_0] = 1 if params[:iSortCol_0].blank?
      sort_field = SORT_MAP[params[:iSortCol_0].to_i]
      @users = User.get_all_users_except_id(current_user.id, page, per_page, params[:sSearch], sort_field + " " + params[:sSortDir_0],organization_id)
      render :json => @users
      return
    end

  end

  ##
  #Handle new an user
  #Parameters::
  #Return::
  # * (object) an new instance user
  #*Author*:: NamTV
  #
  def new
     @user = User.new
     @user_groups = UserGroup.get_all_user_groups_in_org(params[:organization_id])
  end

  ##
  #Handle create an user
  #Parameters::
  # * (object) *user*: current input user
  # * (Array) *user_groups*: current groups that user join
  #Return::
  # * (object) an new instance user
  #*Author*::NamTV
  #
  def create
    group_ids = params["user_groups"]
    org_id = params[:organization_id]
    @user = User.new(params[:user])
    @user.user_group_ids = group_ids
    @user.organization_id = org_id

    if @user.save
      redirect_to organization_users_path(org_id)
    else
      flash[:error] = t('users.new.exist')
      @user_groups = UserGroup.all
      render :new
    end
  end

  ##
  #Handle edit an user
  #Parameters::
  # * (integer) *id*: current user id to edit
  #Return::
  # * (object) an new instance user
  #*Author*:: NamTV
  #
  def edit
    @user = User.find_by_id(params[:id])
    @user_groups = UserGroup.get_all_user_groups_in_org(params[:organization_id])
    #render :edit_temp
    render :edit
    #render :_edit_store_owner
  end

  ##
  #Handle update an user
  #Parameters::
  # * (integer) *id*: current user id to update
  # * (object) *user*: current user input
  # * (Array) *user_groups*: current groups that user join
  #Return::
  # * (object) an new instance user
  #*Author*:: NamTV
  #
  def update
    user_group_ids = params["user_groups"] || []
    user_group_ids.map! { |g| g.to_i }
    @user = User.find_by_id(params[:id])
    current_group_ids = @user.user_group_ids

    if params["user"] && params["user"]["password"].blank?
      params["user"].delete(:password)
      params["user"].delete(:password_confirmation)
    end

    if @user.update_attributes(params["user"])
      is_logged = !@user.previous_changes.blank?
      if current_group_ids != user_group_ids
        @user.user_group_ids = user_group_ids
        @user.create_activity :edit_info, owner: current_user, params: {:detail => I18n.t('logs.edit_user', user_name: @user.user_full_name)} if !is_logged
      end
      redirect_to organization_users_path(params[:organization_id])
      return
    else
      @user_groups = UserGroup.get_all_user_groups_in_org(params[:organization_id])
      render :edit_temp
      return
    end
  end


  ##
  #Handle detroy an user
  #Parameters::
  # * (integer) *id*: current user id to destroy
  #Return::
  # * (json) status: ok=>done
  #*Author*:: NamTV
  #
  def destroy
    @user = User.find_by_id(params[:id])
    @user.destroy
    render :json=>{:status =>t('users.destroy.success')}
  end

  def reorder

  end

end
